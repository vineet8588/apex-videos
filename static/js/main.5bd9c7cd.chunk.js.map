{"version":3,"sources":["theme.ts","components/header/logo.svg","ColorModeSwitcher.tsx","components/header/Header.tsx","components/video-player/VideoPlayer.tsx","components/body/PopOver.tsx","components/body/Body.tsx","components/Main.tsx","App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["styles","global","props","body","fontFamily","color","mode","bg","lineHeight","theme","extendTheme","config","initialColorMode","colors","transparent","accent","bg_dark","bg_light","components","Button","variants","_hover","ColorModeSwitcher","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","_focus","outline","size","fontSize","variant","onClick","icon","aria-label","Header","justify","minW","display","src","logo","mr","VideoPlayer","width","url","controls","PopOver","console","log","data","isCentered","onClose","isOpen","motionPreset","title","mt","direction","justifyContent","author","href","isExternal","m","style","textDecoration","textDecor","p","Body","useState","setdata","curr","setcurr","useEffect","fetch","then","res","json","catch","err","useDisclosure","onOpen","columns","spacing","slice","reverse","map","post","cursor","transform","transition","rounded","boxShadow","overflow","noOfLines","id","Main","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.5bd9c7cd.chunk.js","sourcesContent":["import { extendTheme, ThemeConfig, ThemeComponents} from \"@chakra-ui/react\"\nimport {mode} from '@chakra-ui/theme-tools'\n\nconst config : ThemeConfig = {\n  initialColorMode: \"dark\"\n}\n\nconst colors = {\n  transparent: \"transparent\",\n  accent: \"#fd4d4d\",\n  bg_dark:\"#151a21\",\n  bg_light:\"#F7FAFC\",\n}\n\nconst styles = {\n  global: (props:any) => ({\n    body: {\n      fontFamily: \"body\",\n      color: mode(\"#1A202C\", \"#dee3ea\")(props),\n      bg: mode(\"white\", \"#0b0e11\")(props),\n      lineHeight: \"base\",\n    },\n  }),\n}\n\n//Add bg color !!\nconst components : ThemeComponents = {\n  Button: {\n    // default variant : solid\n    variants: {\n      \"new\" : props => ({\n        color: \"#fff\",\n        bg : \"#fd4d4d\",\n        _hover: {\n          bg: \"#e2041e\",\n        },\n      }),\n    },\n  },\n};\n\nconst theme = extendTheme({ config , colors, styles, components })\n\nexport default theme\n\n","export default __webpack_public_path__ + \"static/media/logo.fb65eced.svg\";","import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <IconButton\n      _focus={{outline:\"none\"}}\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n","import { Box, Image, Center, Flex } from '@chakra-ui/react'\nimport React from 'react'\nimport logo from \"./logo.svg\"\nimport { ColorModeSwitcher } from '../../ColorModeSwitcher'\n\ninterface Props {\n    \n}\n\nexport const Header = (props: Props) => {\n    return (\n        <Flex justify={[\"center\",\"center\",\"space-between\"]}>\n            <Box minW=\"45px\" display={[\"none\",\"none\",\"block\"]}/>\n\n            <Image src={logo}/>\n            <Center display={[\"none\",\"none\",\"flex\"]}>\n                <ColorModeSwitcher mr=\"5px\"/>\n            </Center>\n        </Flex>\n    )\n}\n","import React from 'react'\nimport ReactPlayer from 'react-player/lazy'\n// import {FaPlay} from 'react-icons/fa'\n\ninterface Props {\n    url : string | undefined,\n}\n\nexport const VideoPlayer = (props: Props) => {\n    return(\n        <ReactPlayer \n            width=\"100%\" \n            url={props.url+\"/DASHPlaylist.mpd\"} \n            // playIcon={<FaPlay size=\"2em\" color=\"#fd4d4d\"/>} \n            // playing={true} \n            // light={true} \n            controls={true}/>\n    )\n}\n","import React from 'react'\nimport {\n    Button,\n    Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalBody,\n    Link,\n    Flex,\n    Box,\n    Text\n  } from \"@chakra-ui/react\"\nimport {FaArrowCircleRight} from 'react-icons/fa'\nimport {BsArrowLeft} from 'react-icons/bs'\nimport { VideoPlayer } from '../video-player/VideoPlayer'\n\n\ninterface dataObject{\n    title: string,\n    author: string,\n    url: string\n}\ninterface Props {\n    onClose: any,\n    isOpen: boolean,\n    data: dataObject | undefined\n}\n\nexport const PopOver = (props: Props) => {\n    console.log(props.data)\n    return (\n        <Modal\n            isCentered\n            onClose={props.onClose}\n            isOpen={props.isOpen}\n            motionPreset=\"slideInBottom\"\n            size=\"3xl\"\n        >\n            <ModalOverlay />\n            <ModalContent>\n            <ModalHeader>\n                <Button _focus={{outline:\"none\"}} color=\"accent\" onClick={props.onClose} variant=\"link\"><BsArrowLeft/> Back</Button> <br/>\n                {props.data?.title}</ModalHeader>\n            <ModalBody>\n                <VideoPlayer url={props.data?.url}/>\n                <Flex mt={4} direction={['column','row']} justifyContent=\"space-between\">\n                    <Box>\n                        Video uploaded by respected user : u/{props.data?.author} <br/>\n                        On the subreddit <Link color=\"accent\" href=\"https://chakra-ui.com\" isExternal>r/apexlegends</Link>.\n                    </Box>\n                    <Flex m={[1,2]} justifyContent=\"center\">\n                    <Link style={{textDecoration:'none'}} textDecor='none' href={props.data?.url} isExternal>\n                        <Button p={[1,2,3]} variant=\"new\" _focus={{outline:\"none\"}}> <Text fontSize={['10px','14px']} mr={[1,2]}>GO TO POST </Text> <FaArrowCircleRight/> </Button>\n                    </Link>\n                    </Flex>\n                </Flex>\n            </ModalBody>\n            </ModalContent>\n        </Modal>\n    )\n      \n}\n\n","import { SimpleGrid , Box, Image, Text, useColorModeValue, useDisclosure } from '@chakra-ui/react'\nimport React,{useEffect, useState} from 'react'\nimport { PopOver } from './PopOver'\n\nconst apiURL = \"http://vineet8588.pythonanywhere.com/allvideos\"\n\ninterface Props {\n    \n}\n\nexport const Body = (props: Props) => {\n    \n    const [data, setdata] = useState<Array<any>>()\n    const [curr, setcurr] = useState<any>()\n    \n\n    useEffect(() => {\n        fetch(apiURL)\n        .then(\n            res => res.json()\n        )\n        .then(data =>{\n            setdata(data)\n        })\n        .catch(err=>{\n            console.log(err)\n        })\n    }, [])\n\n    const bg = useColorModeValue(\"bg_light\", \"bg_dark\")\n    const { isOpen, onOpen, onClose } = useDisclosure()\n\n    return (\n        <>\n        <PopOver data={curr} isOpen={isOpen} onClose={onClose}/>\n        \n        <SimpleGrid p=\"45px\" columns={[1,2,3,4]} spacing={10}>\n            {\n                data?.slice(0).reverse().map((post)=> (\n                    <Box \n                        cursor=\"pointer\" \n                        _hover={{transform:'scale(1.1)', transition:'all .2s ease-in-out;'}} \n                        onClick={()=>{onOpen(); setcurr(post);}} \n                        key={post.id}  \n                        rounded=\"md\" \n                        boxShadow=\"md\" \n                        overflow=\"hidden\"\n                        > \n                        <Image src=\"/thumbnail.jpg\" /> \n                        <Box bg={bg} p={4}>\n                            <Text noOfLines={[1, 2]}>\n                                {post.title}\n                            </Text>\n                        </Box> \n                    </Box>\n                    )\n                )\n            }\n            \n        </SimpleGrid>\n        </>\n    )\n}\n","import React from 'react'\nimport {\n    Box\n  } from \"@chakra-ui/react\"\nimport { Header } from './header/Header'\nimport { Body } from './body/Body'\n\n\ninterface Props {\n    \n}\n\nconst Main = (props: Props) => {\n    // return(<VideoPlayer url=\"https://v.redd.it/qio7391yes171\"/>)\n    // return(<Button variant=\"new\">Hello </Button>)\n    return (\n        <Box justifyContent=\"center\">\n            <Header/>\n            <Body/>\n        </Box>\n    )\n}\n\nexport default Main\n","import * as React from \"react\"\nimport {ChakraProvider} from \"@chakra-ui/react\"\n\nimport theme from \"./theme\"\nimport Main from \"./components/Main\"\n\n\nexport const App = () => (\n  <ChakraProvider theme={theme}>\n    <Main/>\n  </ChakraProvider>\n)\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { App } from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport theme from \"./theme\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript initialColorMode={theme.config.initialColorMode}/>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}